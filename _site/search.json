[
  {
    "objectID": "SalarytrendsAI.html",
    "href": "SalarytrendsAI.html",
    "title": "Salary Disparities Across Disciplines – Who benefits most from AI’s rise?",
    "section": "",
    "text": "Introduction and Research Rationale Why is this topic important? The rapid rise of Artificial Intelligence (AI) is transforming salary structures across various industries. As AI-driven automation reshapes workforce demands, professionals in technology and AI-related fields see significant salary growth, while others may face wage stagnation. Research suggests that high-skilled workers in non-routine jobs are particularly susceptible to AI-driven automation, but the wage benefits vary across occupations (Ozgul et al. (2024)) . This research aims to explore how AI impacts salaries across disciplines and what factors drive wage disparities in 2024.\nWhat trends make this a crucial area of study in 2024? AI vs. Non-AI Salary Gaps: AI-driven careers, such as data science and machine learning engineering, command high salaries, while traditional roles in customer service and administration may see declining wages due to automation. Studies indicate that AI adoption contributes to labor demand shifts, increasing wages for AI-intensive roles while leading to stagnation in others (Alderucci)\nGeographic Salary Variations: Certain regions, like Silicon Valley and New York, offer higher AI salaries, while emerging AI hubs in Europe and Asia may present different trends. Research shows that developing economies, such as India, face “double vulnerability”—a high concentration of workers in low-skill occupations with greater automation potential and lower AI preparedness, compared to developed economies like the U.S. (Ganuthula and Balaraman (2025)).\nRemote vs. In-Office Pay Differences: The rise of remote work has reshaped salary structures, with some AI professionals earning global-scale wages despite living in lower-cost regions.\nIndustry-Specific Wage Growth: AI adoption has led to salary booms in tech, finance, and healthcare, while manufacturing and retail may face stagnation.\nWhat do you expect to find in your analysis? How salaries differ across AI vs. non-AI careers by comparing compensation trends in AI-driven fields vs. traditional sectors. Regions with the highest-paying jobs in AI and non-AI disciplines, highlighting the influence of location on wages. Remote vs. In-Office Salary Comparisons, exploring whether AI professionals working remotely earn more than their in-office counterparts. Industries with the biggest wage growth in 2024, pinpointing which sectors benefited the most from AI-driven transformations.\n##References Ozgul, P., Fregin, M. C., Stops, M., & Peukert, C. (2024). AI’s Impact on High-Skilled Workers and Wage Disparities. arXiv preprint. Retrieved from https://arxiv.org/abs/2404.06472 Acemoglu, D., Lelarge, C., & Restrepo, P. (2023). Quantifying the impact of AI on productivity and labor demand: Evidence from US Census Microdata. NBER Working Paper. Retrieved from https://www.nber.org/papers/w31424 Ganuthula, V. R. & Balaraman, K. K. (2025). Skill-Based Labor Market Polarization in the Age of AI: A Comparative Analysis of India and the United States. arXiv preprint. Retrieved from https://arxiv.org/abs/2501.15809\n\n\n\n\nReferences\n\nAlderucci, D. “Quantifying the Impact of AI on Productivity and Labor Demand: Evidence from US Census Microdata,”\n\n\nGanuthula, V. R. R., and K. K. Balaraman. (2025): “Skill-Based Labor Market Polarization in the Age of AI: A Comparative Analysis of India and the United States,”\n\n\nOzgul, P., M.-C. Fregin, M. Stops, S. Janssen, and M. Levels. (2024): “High-skilled human workers in non-routine jobs are susceptible to AI automation but wage benefits differ between occupations,” arXiv preprint arXiv:2404.06472,."
  },
  {
    "objectID": "data_analysis.html",
    "href": "data_analysis.html",
    "title": "Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport plotly.express as px\n\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\") \ndf.columns = df.columns.str.strip().str.lower()  # Normalize column names\n\nprint(df.columns.tolist())  \n\n/tmp/ipykernel_2543/2032169944.py:7: DtypeWarning: Columns (19,30) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(\"lightcast_job_postings.csv\")\n\n\n['id', 'last_updated_date', 'last_updated_timestamp', 'duplicates', 'posted', 'expired', 'duration', 'source_types', 'sources', 'url', 'active_urls', 'active_sources_info', 'title_raw', 'body', 'modeled_expired', 'modeled_duration', 'company', 'company_name', 'company_raw', 'company_is_staffing', 'education_levels', 'education_levels_name', 'min_edulevels', 'min_edulevels_name', 'max_edulevels', 'max_edulevels_name', 'employment_type', 'employment_type_name', 'min_years_experience', 'max_years_experience', 'is_internship', 'salary', 'remote_type', 'remote_type_name', 'original_pay_period', 'salary_to', 'salary_from', 'location', 'city', 'city_name', 'county', 'county_name', 'msa', 'msa_name', 'state', 'state_name', 'county_outgoing', 'county_name_outgoing', 'county_incoming', 'county_name_incoming', 'msa_outgoing', 'msa_name_outgoing', 'msa_incoming', 'msa_name_incoming', 'naics2', 'naics2_name', 'naics3', 'naics3_name', 'naics4', 'naics4_name', 'naics5', 'naics5_name', 'naics6', 'naics6_name', 'title', 'title_name', 'title_clean', 'skills', 'skills_name', 'specialized_skills', 'specialized_skills_name', 'certifications', 'certifications_name', 'common_skills', 'common_skills_name', 'software_skills', 'software_skills_name', 'onet', 'onet_name', 'onet_2019', 'onet_2019_name', 'cip6', 'cip6_name', 'cip4', 'cip4_name', 'cip2', 'cip2_name', 'soc_2021_2', 'soc_2021_2_name', 'soc_2021_3', 'soc_2021_3_name', 'soc_2021_4', 'soc_2021_4_name', 'soc_2021_5', 'soc_2021_5_name', 'lot_career_area', 'lot_career_area_name', 'lot_occupation', 'lot_occupation_name', 'lot_specialized_occupation', 'lot_specialized_occupation_name', 'lot_occupation_group', 'lot_occupation_group_name', 'lot_v6_specialized_occupation', 'lot_v6_specialized_occupation_name', 'lot_v6_occupation', 'lot_v6_occupation_name', 'lot_v6_occupation_group', 'lot_v6_occupation_group_name', 'lot_v6_career_area', 'lot_v6_career_area_name', 'soc_2', 'soc_2_name', 'soc_3', 'soc_3_name', 'soc_4', 'soc_4_name', 'soc_5', 'soc_5_name', 'lightcast_sectors', 'lightcast_sectors_name', 'naics_2022_2', 'naics_2022_2_name', 'naics_2022_3', 'naics_2022_3_name', 'naics_2022_4', 'naics_2022_4_name', 'naics_2022_5', 'naics_2022_5_name', 'naics_2022_6', 'naics_2022_6_name']\n\n\n\ncolumns_to_drop = [\n    \"id\", \"url\", \"active_urls\", \"duplicates\", \"last_updated_timestamp\",\n    \"naics2\", \"naics3\", \"naics4\", \"naics5\", \"naics6\",\n    \"soc_2\", \"soc_3\", \"soc_5\"\n]\ndf.drop(columns=columns_to_drop, inplace=True)\ndf.head()\n\n\n\n\n\n\n\n\nlast_updated_date\nposted\nexpired\nduration\nsource_types\nsources\nactive_sources_info\ntitle_raw\nbody\nmodeled_expired\n...\nnaics_2022_2\nnaics_2022_2_name\nnaics_2022_3\nnaics_2022_3_name\nnaics_2022_4\nnaics_2022_4_name\nnaics_2022_5\nnaics_2022_5_name\nnaics_2022_6\nnaics_2022_6_name\n\n\n\n\n0\n9/6/2024\n6/2/2024\n6/8/2024\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\nNaN\nEnterprise Analyst (II-III)\n31-May-2024\\n\\nEnterprise Analyst (II-III)\\n\\n...\n6/8/2024\n...\n44.0\nRetail Trade\n441.0\nMotor Vehicle and Parts Dealers\n4413.0\nAutomotive Parts, Accessories, and Tire Retailers\n44133.0\nAutomotive Parts and Accessories Retailers\n441330.0\nAutomotive Parts and Accessories Retailers\n\n\n1\n8/2/2024\n6/2/2024\n8/1/2024\nNaN\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\nNaN\nOracle Consultant - Reports (3592)\nOracle Consultant - Reports (3592)\\n\\nat SMX i...\n8/1/2024\n...\n56.0\nAdministrative and Support and Waste Managemen...\n561.0\nAdministrative and Support Services\n5613.0\nEmployment Services\n56132.0\nTemporary Help Services\n561320.0\nTemporary Help Services\n\n\n2\n9/6/2024\n6/2/2024\n7/7/2024\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\nNaN\nData Analyst\nTaking care of people is at the heart of every...\n6/10/2024\n...\n52.0\nFinance and Insurance\n524.0\nInsurance Carriers and Related Activities\n5242.0\nAgencies, Brokerages, and Other Insurance Rela...\n52429.0\nOther Insurance Related Activities\n524291.0\nClaims Adjusting\n\n\n3\n9/6/2024\n6/2/2024\n7/20/2024\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\nNaN\nSr. Lead Data Mgmt. Analyst - SAS Product Owner\nAbout this role:\\n\\nWells Fargo is looking for...\n6/12/2024\n...\n52.0\nFinance and Insurance\n522.0\nCredit Intermediation and Related Activities\n5221.0\nDepository Credit Intermediation\n52211.0\nCommercial Banking\n522110.0\nCommercial Banking\n\n\n4\n6/19/2024\n6/2/2024\n6/17/2024\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\nNaN\nComisiones de $1000 - $3000 por semana... Comi...\nComisiones de $1000 - $3000 por semana... Comi...\n6/17/2024\n...\n99.0\nUnclassified Industry\n999.0\nUnclassified Industry\n9999.0\nUnclassified Industry\n99999.0\nUnclassified Industry\n999999.0\nUnclassified Industry\n\n\n\n\n5 rows × 118 columns\n\n\n\n\n# Visualize missing values\nmsno.heatmap(df)\nplt.title(\"Missing Values Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfor col in df.columns:\n    print(repr(col))\n\n\n'last_updated_date'\n'posted'\n'expired'\n'duration'\n'source_types'\n'sources'\n'active_sources_info'\n'title_raw'\n'body'\n'modeled_expired'\n'modeled_duration'\n'company'\n'company_name'\n'company_raw'\n'company_is_staffing'\n'education_levels'\n'education_levels_name'\n'min_edulevels'\n'min_edulevels_name'\n'max_edulevels'\n'max_edulevels_name'\n'employment_type'\n'employment_type_name'\n'min_years_experience'\n'max_years_experience'\n'is_internship'\n'salary'\n'remote_type'\n'remote_type_name'\n'original_pay_period'\n'salary_to'\n'salary_from'\n'location'\n'city'\n'city_name'\n'county'\n'county_name'\n'msa'\n'msa_name'\n'state'\n'state_name'\n'county_outgoing'\n'county_name_outgoing'\n'county_incoming'\n'county_name_incoming'\n'msa_outgoing'\n'msa_name_outgoing'\n'msa_incoming'\n'msa_name_incoming'\n'naics2_name'\n'naics3_name'\n'naics4_name'\n'naics5_name'\n'naics6_name'\n'title'\n'title_name'\n'title_clean'\n'skills'\n'skills_name'\n'specialized_skills'\n'specialized_skills_name'\n'certifications'\n'certifications_name'\n'common_skills'\n'common_skills_name'\n'software_skills'\n'software_skills_name'\n'onet'\n'onet_name'\n'onet_2019'\n'onet_2019_name'\n'cip6'\n'cip6_name'\n'cip4'\n'cip4_name'\n'cip2'\n'cip2_name'\n'soc_2021_2'\n'soc_2021_2_name'\n'soc_2021_3'\n'soc_2021_3_name'\n'soc_2021_4'\n'soc_2021_4_name'\n'soc_2021_5'\n'soc_2021_5_name'\n'lot_career_area'\n'lot_career_area_name'\n'lot_occupation'\n'lot_occupation_name'\n'lot_specialized_occupation'\n'lot_specialized_occupation_name'\n'lot_occupation_group'\n'lot_occupation_group_name'\n'lot_v6_specialized_occupation'\n'lot_v6_specialized_occupation_name'\n'lot_v6_occupation'\n'lot_v6_occupation_name'\n'lot_v6_occupation_group'\n'lot_v6_occupation_group_name'\n'lot_v6_career_area'\n'lot_v6_career_area_name'\n'soc_2_name'\n'soc_3_name'\n'soc_4'\n'soc_4_name'\n'soc_5_name'\n'lightcast_sectors'\n'lightcast_sectors_name'\n'naics_2022_2'\n'naics_2022_2_name'\n'naics_2022_3'\n'naics_2022_3_name'\n'naics_2022_4'\n'naics_2022_4_name'\n'naics_2022_5'\n'naics_2022_5_name'\n'naics_2022_6'\n'naics_2022_6_name'\n\n\n\n\nmissing_percentage = df.isnull().mean() * 100\nmissing_percentage\n\nlast_updated_date     0.030346\nposted                0.030346\nexpired              10.819609\nduration             37.678281\nsource_types          0.030346\n                       ...    \nnaics_2022_4_name     0.060691\nnaics_2022_5          0.060691\nnaics_2022_5_name     0.060691\nnaics_2022_6          0.060691\nnaics_2022_6_name     0.060691\nLength: 118, dtype: float64\n\n\n\n\n# Fill missing values\ndf[\"min_years_experience\"].fillna(df[\"min_years_experience\"].median(), inplace=True)\ndf[\"lightcast_sectors_name\"].fillna(\"Unknown\", inplace=True)\n\ndf.drop(columns=['active_sources_info'], inplace=True)\n\n# Impute missing values in 'max_years_experience' with '99'\ndf['max_years_experience'].fillna(99, inplace=True)\n\n# Impute missing values in 'max_edulevels_name' with \"Ph.D. or professional degree\"\ndf['max_edulevels_name'].fillna(\"Ph.D. or professional degree\", inplace=True)\n\n# Impute missing values in 'max_edulevels' with the median of the column\nmedian_max_edulevels = df['max_edulevels'].median()\ndf['max_edulevels'].fillna(median_max_edulevels, inplace=True)\n\n\n\nfor col in df.columns:\n    print(repr(col))\n\n'last_updated_date'\n'posted'\n'expired'\n'duration'\n'source_types'\n'sources'\n'title_raw'\n'body'\n'modeled_expired'\n'modeled_duration'\n'company'\n'company_name'\n'company_raw'\n'company_is_staffing'\n'education_levels'\n'education_levels_name'\n'min_edulevels'\n'min_edulevels_name'\n'max_edulevels'\n'max_edulevels_name'\n'employment_type'\n'employment_type_name'\n'min_years_experience'\n'max_years_experience'\n'is_internship'\n'salary'\n'remote_type'\n'remote_type_name'\n'original_pay_period'\n'salary_to'\n'salary_from'\n'location'\n'city'\n'city_name'\n'county'\n'county_name'\n'msa'\n'msa_name'\n'state'\n'state_name'\n'county_outgoing'\n'county_name_outgoing'\n'county_incoming'\n'county_name_incoming'\n'msa_outgoing'\n'msa_name_outgoing'\n'msa_incoming'\n'msa_name_incoming'\n'naics2_name'\n'naics3_name'\n'naics4_name'\n'naics5_name'\n'naics6_name'\n'title'\n'title_name'\n'title_clean'\n'skills'\n'skills_name'\n'specialized_skills'\n'specialized_skills_name'\n'certifications'\n'certifications_name'\n'common_skills'\n'common_skills_name'\n'software_skills'\n'software_skills_name'\n'onet'\n'onet_name'\n'onet_2019'\n'onet_2019_name'\n'cip6'\n'cip6_name'\n'cip4'\n'cip4_name'\n'cip2'\n'cip2_name'\n'soc_2021_2'\n'soc_2021_2_name'\n'soc_2021_3'\n'soc_2021_3_name'\n'soc_2021_4'\n'soc_2021_4_name'\n'soc_2021_5'\n'soc_2021_5_name'\n'lot_career_area'\n'lot_career_area_name'\n'lot_occupation'\n'lot_occupation_name'\n'lot_specialized_occupation'\n'lot_specialized_occupation_name'\n'lot_occupation_group'\n'lot_occupation_group_name'\n'lot_v6_specialized_occupation'\n'lot_v6_specialized_occupation_name'\n'lot_v6_occupation'\n'lot_v6_occupation_name'\n'lot_v6_occupation_group'\n'lot_v6_occupation_group_name'\n'lot_v6_career_area'\n'lot_v6_career_area_name'\n'soc_2_name'\n'soc_3_name'\n'soc_4'\n'soc_4_name'\n'soc_5_name'\n'lightcast_sectors'\n'lightcast_sectors_name'\n'naics_2022_2'\n'naics_2022_2_name'\n'naics_2022_3'\n'naics_2022_3_name'\n'naics_2022_4'\n'naics_2022_4_name'\n'naics_2022_5'\n'naics_2022_5_name'\n'naics_2022_6'\n'naics_2022_6_name'\n\n\n\n# Remove duplicates based on 'title', 'company_name', 'location', and 'posted'\ndf = df.drop_duplicates(subset=[\"title\", \"company_name\", \"location\", \"posted\"], keep=\"first\")\n\n\nfig = px.bar(df[\"lightcast_sectors_name\"].value_counts(), title=\"Job Postings by Industry\")\nfig.show()\n\n                            \n                                            \n\n\n\nimport plotly.express as px\nimport pandas as pd\n\n# Convert 'posted' to datetime\ndf['posted'] = pd.to_datetime(df['posted'], format='%m/%d/%Y')\n\n# Extract year from 'posted'\ndf['year'] = df['posted'].dt.year\n\n# Grouping data by year and industry and counting occurrences\nindustry_trends = df.groupby(['year', 'lightcast_sectors_name']).size().reset_index(name='counts')\nindustry_trends = industry_trends.sort_values(by=['year', 'lightcast_sectors_name'])\n\n# Create the bar plot\nfig = px.bar(industry_trends, x='year', y='counts', color='lightcast_sectors_name',\n              title='Job Postings by Industry Over Time',\n              labels={'counts': 'Number of Job Postings', 'lightcast_sectors_name': 'Industry'},\n              color_discrete_sequence=px.colors.qualitative.Alphabet)  # Using a vibrant color sequence\n\n# Update layout and customize font\nfig.update_layout(\n    xaxis_title='Year',\n    yaxis_title='Number of Job Postings',\n    font=dict(\n        family=\"Georgia, serif\",  # Customize the font family\n        size=16,  # Customize the font size\n        color=\"darkblue\"  # Customize the font color\n    ))\n\n# Show the plot\nfig.show()\n\n/tmp/ipykernel_2543/3770835054.py:5: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/tmp/ipykernel_2543/3770835054.py:8: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n                            \n                                            \n\n\n\nfig = px.box(df, x=\"lightcast_sectors_name\", y=\"salary\", title=\"Salary Distribution by Industry\")\nfig.show()\n\n                            \n                                            \n\n\n\nfig = px.pie(df, names=\"remote_type_name\", title=\"Remote vs. On-Site Jobs\")\nfig.show()\n\n                            \n                                            \n\n\n\nimport plotly.express as px\n\n# Assuming 'df' is your DataFrame and already imported and prepared\nfig = px.pie(df, names='remote_type_name', title='Remote vs. On-Site Jobs',\n             color='remote_type_name',  # Ensures that color depends on the type of remote work\n             color_discrete_map={'Remote':'#636EFA', 'Hybrid Remote':'#EF553B', \n                                 'Not Remote':'#00CC96', 'null':'#AB63FA', '[None]':'#FFA15A'})\n\n# Customizing the legend and labels\nfig.update_traces(textinfo='percent+label', hoverinfo='label+percent', textfont_size=14)\nfig.update_layout(legend_title_text='Job Type')\n\n# Add detailed annotations and improve design\nfig.add_annotation(text=\"Detailed distribution of job types\",\n                   x=0.5, y=0.95, showarrow=False, font_size=12,\n                   font_family=\"Arial\", font_color=\"black\", align=\"center\")\n\nfig.show()\n\n                            \n                                            \n\n\n\nfig = px.box(df, x=\"education_levels_name\", y=\"salary\", title=\"Education Level vs. Salary\")\nfig.show()\n\n                            \n                                            \n\n\n\nimport plotly.express as px\n\n# Create the box plot\nfig = px.box(df, x=\"company_name\", y=\"salary\",\n             title=\"Salary Distribution by Company\")\n\n# Update the layout and fonts for better readability and aesthetics\nfig.update_layout(\n    xaxis=dict(\n        title='Company',\n        tickangle=45,  # Rotate labels for better readability\n        tickfont=dict(family='Rockwell', size=10, color='red')\n    ),\n    yaxis=dict(\n        title='Salary',\n        tickfont=dict(size=12, family='Arial', color='grey')\n    ),\n    title=dict(\n        text=\"Salary Distribution by Company\",\n        font=dict(family='Verdana', size=20, color='darkblue')\n    ),\n    plot_bgcolor='lavender',  # Aesthetic background color\n    paper_bgcolor='mintcream'  # Background color outside the plot\n)\n\n# Add annotations if necessary\nfig.add_annotation(\n    x=\"Specific Company\", y=250000, text=\"Note: High outlier\",\n    showarrow=True, arrowhead=1, arrowsize=2, arrowcolor='darkred',\n    font=dict(family=\"Courier New\", size=12, color=\"black\"),\n    bordercolor=\"black\", borderwidth=2, borderpad=4,\n    bgcolor=\"yellow\", opacity=0.8\n)\n\n# Show the plot\nfig.show()\n\n                            \n                                            \n\n\n\nimport plotly.express as px\n\n\nfig = px.density_heatmap(\n    df,\n    x='lightcast_sectors_name',\n    y='state_name',\n    z='salary',\n    nbinsx=20,  # Adjust the number of bins along the x-axis as needed\n    nbinsy=20,  # Adjust the number of bins along the y-axis as needed\n    color_continuous_scale='Viridis',  # A visually pleasing color scale\n    title='Heatmap of Average Salary by Job Category and Location'\n)\nfig.update_layout(\n    xaxis_title='Job Category',\n    yaxis_title='Location',\n    coloraxis_colorbar=dict(title='Avg Salary')\n)\nfig.show()\n\n                            \n                                            \n\n\n\nimport pandas as pd\n\nskills_data = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n    \"Python\": [5, 3, 4, 2],\n    \"SQL\": [4, 2, 5, 3],\n    \"Machine Learning\": [3, 1, 4, 2],\n    \"Cloud Computing\": [2, 2, 3, 1]\n}\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nCloud Computing\n\n\nName\n\n\n\n\n\n\n\n\nAlice\n5\n4\n3\n2\n\n\nBob\n3\n2\n1\n2\n\n\nCharlie\n4\n5\n4\n3\n\n\nDavid\n2\n3\n2\n1\n\n\n\n\n\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(df_skills, annot=True, cmap=\"coolwarm\", linewidths=0.5)\nplt.title(\"Team Skill Levels Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom collections import Counter\n\n# Assuming job_descriptions is a list of text from job postings\ntop_skills = [\"Python\", \"SQL\", \"Machine Learning\", \"Cloud Computing\", \"Docker\", \"AWS\"]\njob_skill_counts = Counter(top_skills)\n\n# Compare with team skill levels\nfor skill in top_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 1  # Assume no knowledge in missing skills\n\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nCloud Computing\nDocker\nAWS\n\n\nName\n\n\n\n\n\n\n\n\n\n\nAlice\n5\n4\n3\n2\n0\n0\n\n\nBob\n3\n2\n1\n2\n0\n0\n\n\nCharlie\n4\n5\n4\n3\n0\n0\n\n\nDavid\n2\n3\n2\n1\n0\n0"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "Welcome to the Job Market Analysis project!"
  }
]